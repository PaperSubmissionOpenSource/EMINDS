"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiamondResize = exports.EllipseResize = exports.RectResize = exports.NodeResize = void 0;
var RectResize_1 = require("./Node/RectResize");
exports.RectResize = RectResize_1.default;
var EllipseResize_1 = require("./Node/EllipseResize");
exports.EllipseResize = EllipseResize_1.default;
var DiamondResize_1 = require("./Node/DiamondResize");
exports.DiamondResize = DiamondResize_1.default;
var NodeResize = {
    pluginName: 'node-resize',
    // 拖动step
    step: 0,
    // 边框和contol拖动点样式的设置
    style: {
        outline: {
            stroke: '#000000',
            strokeWidth: 1,
            strokeDasharray: '3,3',
        },
        controlPoint: {
            width: 7,
            height: 7,
            fill: '#FFFFFF',
            stroke: '#000000',
        },
    },
    // 缩放范围
    sizeRange: {
        rect: {
            minWidth: 30,
            minHeight: 30,
            maxWidth: 300,
            maxHeight: 300,
        },
        ellipse: {
            minRx: 15,
            minRy: 15,
            maxRx: 150,
            maxRy: 150,
        },
        diamond: {
            minRx: 15,
            minRy: 15,
            maxRx: 150,
            maxRy: 150,
        },
    },
    install: function (lf) {
        // 为保证对齐线功能正常使用，step默认是网格grid的两倍，
        // 没有网格设置，默认为2，保证坐标是整数
        if (this.step === 0) {
            var options = lf.options;
            var grid = options.grid;
            if (grid.size && grid.size > 1) {
                this.step = 2 * grid.size;
            }
            else {
                this.step = 2;
            }
        }
        // 设置默认样式，主要将outlineColor设置为透明，不再core包中默认的节点外框
        lf.setTheme({
            rect: {
                strokeWidth: 2,
                outlineColor: 'transparent',
            },
            ellipse: {
                strokeWidth: 2,
                outlineColor: 'transparent',
            },
            diamond: {
                strokeWidth: 2,
                outlineColor: 'transparent',
            },
        });
        lf.register({
            type: RectResize_1.default.type,
            view: RectResize_1.default.view,
            model: RectResize_1.default.model,
        });
        lf.register({
            type: EllipseResize_1.default.type,
            view: EllipseResize_1.default.view,
            model: EllipseResize_1.default.model,
        });
        lf.register({
            type: DiamondResize_1.default.type,
            view: DiamondResize_1.default.view,
            model: DiamondResize_1.default.model,
        });
    },
};
exports.NodeResize = NodeResize;
exports.default = NodeResize;
