"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@logicflow/core");
var ControlGroup_1 = require("../Control/ControlGroup");
var Polygon_1 = require("../BasicShape/Polygon");
var DiamondResizeModel = /** @class */ (function (_super) {
    __extends(DiamondResizeModel, _super);
    function DiamondResizeModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DiamondResizeModel.prototype.setAttributes = function () {
        // @ts-ignore
        var nodeSize = this.properties.nodeSize;
        if (nodeSize) {
            this.rx = nodeSize.rx;
            this.ry = nodeSize.ry;
        }
    };
    return DiamondResizeModel;
}(core_1.DiamondNodeModel));
var DiamondResizeView = /** @class */ (function (_super) {
    __extends(DiamondResizeView, _super);
    function DiamondResizeView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DiamondResizeView.prototype.getControlGroup = function (attributes) {
        var _a = this.props, model = _a.model, graphModel = _a.graphModel;
        return (core_1.h(ControlGroup_1.default, __assign({}, attributes, { nodeModel: model, graphModel: graphModel })));
    };
    // getResizeShape绘制图形，功能等同于基础菱形的getShape功能，可以通过复写此方法，进行节点自定义
    DiamondResizeView.prototype.getResizeShape = function (arrt) {
        return core_1.h("g", null,
            core_1.h(Polygon_1.default, __assign({}, arrt)));
    };
    DiamondResizeView.prototype.getShape = function () {
        var attributes = _super.prototype.getAttributes.call(this);
        var isSelected = this.props.model.isSelected;
        return (core_1.h("g", null,
            this.getResizeShape(attributes),
            isSelected ? this.getControlGroup(attributes) : ''));
    };
    return DiamondResizeView;
}(core_1.DiamondNode));
var EllipseResize = {
    type: 'diamond',
    view: DiamondResizeView,
    model: DiamondResizeModel,
};
exports.default = EllipseResize;
