/**
 * 快照插件，生成视图
 */
function getOuterHTML(el) {
    if (el.outerHTML) {
        return el.outerHTML;
    }
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML;
}
var Snapshot = {
    pluginName: 'snapshot',
    install: function (lf) {
        var _this = this;
        this.offsetX = Number.MAX_SAFE_INTEGER;
        this.offsetY = Number.MAX_SAFE_INTEGER;
        lf.getSnapshot = function (fileName) {
            _this.fileName = fileName || "logic-flow." + Date.now() + ".png";
            lf.graphModel.nodes.forEach(function (item) {
                var x = item.x, width = item.width, y = item.y, height = item.height;
                var offsetX = x - width / 2;
                var offsetY = y - height / 2;
                if (offsetX < _this.offsetX) {
                    _this.offsetX = offsetX - 5;
                }
                if (offsetY < _this.offsetY) {
                    _this.offsetY = offsetY - 5;
                }
            });
            lf.graphModel.edges.forEach(function (edge) {
                if (edge.pointsList) {
                    edge.pointsList.forEach(function (point) {
                        var x = point.x, y = point.y;
                        if (x < _this.offsetX) {
                            _this.offsetX = x - 5;
                        }
                        if (y < _this.offsetY) {
                            _this.offsetY = y - 5;
                        }
                    });
                }
            });
            var svgRootElement = lf.container.querySelector('svg');
            _this.downloadSvg(svgRootElement, _this.fileName);
        };
    },
    triggerDownload: function (imgURI) {
        var evt = new MouseEvent('click', {
            view: window,
            bubbles: false,
            cancelable: true,
        });
        var a = document.createElement('a');
        a.setAttribute('download', this.fileName);
        a.setAttribute('href', imgURI);
        a.setAttribute('target', '_blank');
        a.dispatchEvent(evt);
    },
    removeAnchor: function (element) {
        var childNodes = element.childNodes;
        var childLength = element.childNodes && element.childNodes.length;
        for (var i = 0; i < childLength; i++) {
            var child = childNodes[i];
            var classList = (child.classList && Array.from(child.classList)) || [];
            if (classList.indexOf('lf-anchor') > -1) {
                element.removeChild(element.childNodes[i]);
                childLength--;
                i--;
            }
        }
    },
    downloadSvg: function (svg) {
        var _this = this;
        var copy = svg.cloneNode(true);
        var dpr = window.devicePixelRatio || 1;
        var graph = copy.lastChild;
        var childLength = graph.childNodes && graph.childNodes.length;
        if (childLength) {
            for (var i = 0; i < childLength; i++) {
                var lfLayer = graph.childNodes[i];
                // 只保留包含节点和连线的基础图层进行下载，其他图层删除
                var layerClassList = lfLayer.classList && Array.from(lfLayer.classList);
                if (layerClassList && layerClassList.indexOf('lf-base') < 0) {
                    graph.removeChild(graph.childNodes[i]);
                    childLength--;
                    i--;
                }
                else {
                    // 删除锚点
                    var lfBase = graph.childNodes[i];
                    lfBase && lfBase.childNodes.forEach(function (item) {
                        var element = item;
                        _this.removeAnchor(element.firstChild);
                    });
                }
            }
        }
        // offset值加10，保证图形不会紧贴着下载图片的左边和上边
        copy.lastChild.style.transform = "matrix(1, 0, 0, 1, " + (-this.offsetX + 10) + ", " + (-this.offsetY + 10) + ")";
        var canvas = document.createElement('canvas');
        var base = document.getElementsByClassName('lf-base')[0];
        var bbox = base.getBoundingClientRect();
        // width,height 值加40，保证图形不会紧贴着下载图片的右边和下边
        canvas.style.width = bbox.width + "px";
        canvas.style.height = bbox.height + "px";
        canvas.width = bbox.width * dpr + 80;
        canvas.height = bbox.height * dpr + 80;
        var ctx = canvas.getContext('2d');
        ctx.scale(dpr, dpr);
        ctx.clearRect(0, 0, bbox.width, bbox.height);
        var data = getOuterHTML(copy);
        var img = new Image();
        var svgBlob = new Blob([data], { type: 'image/svg+xml;charset=utf-8' });
        var url = window.URL.createObjectURL(svgBlob);
        img.onload = function () {
            ctx.drawImage(img, 0, 0);
            window.URL.revokeObjectURL(url);
            var imgURI = canvas
                .toDataURL('image/png')
                .replace('image/png', 'image/octet-stream');
            _this.triggerDownload(imgURI, _this.fileName);
        };
        img.src = url;
    },
};
export default Snapshot;
export { Snapshot, };
