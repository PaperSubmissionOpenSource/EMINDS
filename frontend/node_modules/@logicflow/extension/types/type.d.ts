import { CircleNodeModel, CircleNode, BaseNodeModel, PolylineEdgeModel, PolylineEdge, PolygonNodeModel, PolygonNode, RectNodeModel, RectNode } from '@logicflow/core/types/LogicFlow';
declare type PointTuple = [number, number];
export interface CircleNodeModelContractor {
    new (data: any, graphModel: any): CircleNodeModel;
}
export interface CircleNodeViewContractor {
    new (): CircleNode;
}
export declare type EventEventModel = BaseNodeModel & {
    r?: number;
};
export interface PolylineEdgeModelContractor {
    new (data: any, graphModel: any): PolylineEdgeModel;
}
export interface PolylineEdgeViewContractor {
    new (): PolylineEdge;
}
export interface PolygonNodeModelContractor {
    new (data: any, graphModel: any): PolygonNodeModel;
}
export interface PolygonNodeViewContractor {
    new (): PolygonNode;
}
export declare type ExclusiveGatewayAttribute = BaseNodeModel & {
    points?: PointTuple[];
};
export interface ServiceTaskModelContractor {
    new (data: any, graphModel: any): RectNodeModel;
}
export interface ServiceTaskViewContractor {
    new (): RectNode;
}
export {};
